#version 460
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_KHR_vulkan_glsl : enable
#extension GL_EXT_shader_atomic_int64 : enable
#include "common.glsl"

layout(set = 1, binding = 0) buffer DEPTH_BUFFER{ 
    Histogram depthBuffer[];
};

layout(set = 2, binding = 0) readonly buffer BatchList{
    uint batchCount;
    uint batchList[];
};

layout(local_size_x = 1024) in;

uint getBucketIDFromDepth(const float depth){
    // depth should be in range [0, 1]
    return uint(depth * camera.nearFarDistance / depthStepSize);
};

void initBucket(inout Bucket bucket, const uint bucketID, const int nextIdx, const uint64_t acc){
    bucket.bucketID = bucketID;
    bucket.nextIdx = nextIdx;
    bucket.acc = acc;
}

uint64_t convertColor32To64(const uint rgba){
    // store 32-bit color to 64-bit variable to avoid overflow
    // add 8 more bit to each channel
    // alpha channel is used as a counter
    const uint r = (rgba & 0xFF);
    const uint g = (rgba >> 8) & 0xFF;
    const uint b = (rgba >> 16) & 0xFF;
    const uint64_t rgba64 = (uint64_t(r) << 48) | (uint64_t(g) << 32) | (uint64_t(b) << 16) | 1;
    return rgba64;
}

void main(){
    drawnBatches = batchCount;

    const uint id = gl_GlobalInvocationID.x / gl_WorkGroupSize.x;
    if (id >= batchCount){
        return;
    }

    const Node batch = nodes[batchList[id]];
    const vec3 batchBBSize = vec3(batch.box.maxX, batch.box.maxY, batch.box.maxZ) - vec3(batch.box.minX, batch.box.minY, batch.box.minZ);
    const uint batchPixelExtend = getBatchPixelExtend(batch, camera.resolution, camera.projection, camera.view);
    const uint localId = gl_LocalInvocationID.x;
    const uint pointCount = batch.maskDepthCount >> 13;
    const uint workAmount = (pointCount / gl_WorkGroupSize.x) + 1;

    for (uint k = batch.pointOffset + localId * workAmount; k < batch.pointOffset + (localId + 1) * workAmount; ++k){
        if ((k - batch.pointOffset) >= pointCount){
            break;
        }
        const vec4 projected = camera.projection * camera.view * vec4(getAdaptivePointPosition(batchBBSize, vec3(batch.box.minX, batch.box.minY, batch.box.minZ), batchPixelExtend, k), 1);

        if((-projected.w <= projected.x) && (projected.x <= projected.w) &&
                (-projected.w <= projected.y) && (projected.y <= projected.w) &&
                (0.f <= projected.z) && (projected.z <= projected.w)){
            // projection is within window
            const vec2 coords = (projected.xy/projected.w * .5f + .5f) * camera.resolution;

            // add point to depth histogram
            const float depth = projected.z / abs(projected.w);
            const uint bucketID = getBucketIDFromDepth(depth);
            const uint pixelID = getPixelID(camera.resolution, uvec2(coords));

            if(depthBuffer[pixelID].startIdx < -1)
                continue;   // propagate error codes

            uint rgba = pointsRgba[k];

            if((toggleFlags & 1) != 0){
                rgba = wang_hash(batchList[id]);
            }else if((toggleFlags & 2) != 0){
                const uint depth = (batch.maskDepthCount >> 8) & 31;
                rgba = wang_hash(depth);
            }

            // convert color
            const uint64_t rgba64 = convertColor32To64(rgba);

            bool finishedInsertPoint = false;
            const uint TIMEOUT = 100;
            uint timeoutCounter = 0;
            uint bucketCount;
            while(!finishedInsertPoint && timeoutCounter < TIMEOUT && (bucketCount = depthBuffer[pixelID].bucketCount) < 100){    // try to insert point until it worked or timeout is encountered
                timeoutCounter += 1;

                // look for bucket to add to
                const int startIdx = depthBuffer[pixelID].startIdx;
                int currIdx = startIdx;
                int nextIdx;
                if(startIdx != -1)
                    nextIdx = depthBuffer[pixelID].buckets[currIdx].nextIdx;
                else
                    nextIdx = -1;

                // check for insert as first
                if(startIdx == -1 || bucketID < depthBuffer[pixelID].buckets[startIdx].bucketID){
                    // bucket should be inserted as new first bucket
	                /// allocate new bucket
                    uint oldBucketCount = atomicCompSwap(depthBuffer[pixelID].bucketCount, bucketCount, bucketCount + 1);
                    if(oldBucketCount == bucketCount){
                        // allocation worked
                        int newIdx = int(oldBucketCount);
                        initBucket(depthBuffer[pixelID].buckets[newIdx], bucketID, currIdx, rgba64);

                        /// change references to point to new bucket
                        int oldValue = atomicCompSwap(depthBuffer[pixelID].startIdx, currIdx, newIdx); 
                        if(oldValue == currIdx){
                            // insertion worked
                            finishedInsertPoint = true;
                        }
                    }
                    continue;
                }

                bool insertFailed = false;
                const uint INNER_TIMEOUT = 10;
                uint inner_timeoutCounter = 0;
                while(!finishedInsertPoint && !insertFailed && inner_timeoutCounter < INNER_TIMEOUT){
                    inner_timeoutCounter += 1;

                    // check for buckets with equal ID
                    if(depthBuffer[pixelID].buckets[currIdx].bucketID == bucketID){
                        // found fitting bucket - add contribution
	                    atomicAdd(depthBuffer[pixelID].buckets[currIdx].acc, rgba64);
                        finishedInsertPoint = true;
                        continue;
                    }

                    // check for inbetween insert (or last)
                    if(depthBuffer[pixelID].buckets[currIdx].bucketID < bucketID 
                        && (nextIdx == -1 || bucketID < depthBuffer[pixelID].buckets[nextIdx].bucketID)){
                        // insert between buckets
                        /// allocate new bucket
                        /// allocate new bucket
                        const uint oldBucketCount = atomicCompSwap(depthBuffer[pixelID].bucketCount, bucketCount, bucketCount + 1);
                        if(oldBucketCount == bucketCount){
                            // allocation worked
                            int newIdx = int(oldBucketCount);
                            initBucket(depthBuffer[pixelID].buckets[newIdx], bucketID, nextIdx, rgba64);

                            /// change references to point to new bucket
                            const int oldValue = atomicCompSwap(depthBuffer[pixelID].buckets[currIdx].nextIdx, nextIdx, newIdx); 
                            if(oldValue == nextIdx){
                                finishedInsertPoint = true;
                            }else{
                                insertFailed = true;    // allocated bucket gets wasted here
                            }
                        }else{
                            insertFailed = true;
                        }
                        continue;
                    }

                    // end-of-loop operations
                    currIdx = nextIdx;
                    if(currIdx != -1)
                        nextIdx = depthBuffer[pixelID].buckets[currIdx].nextIdx;
                    else if(!finishedInsertPoint){
                        insertFailed = true;
                    }
                        
                }

                if(inner_timeoutCounter == INNER_TIMEOUT){
                    finishedInsertPoint = true;
                }

                if(currIdx == -1)
                    depthBuffer[pixelID].startIdx = -3;
            }

            if(timeoutCounter == TIMEOUT)
                depthBuffer[pixelID].startIdx = -2; // error code for outer loop timeout

            if(bucketCount == 100)
                depthBuffer[pixelID].startIdx = -4;
        }
    }
}