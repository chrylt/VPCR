#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_NV_shader_atomic_int64 : require
#extension GL_KHR_vulkan_glsl : enable
#include "common.glsl"

layout(set = 1, binding = 0) buffer COMBINED_BUFFER{
    uint64_t framebuffer[];     // upper 32 bit are depth, lower 32 bit are 8-bit color channels rgba
};

layout(set = 2, binding = 0) readonly buffer BatchList{
    uint batchCount;
    uint batchList[];
};

layout(local_size_x = 1024) in;

void main(){
    drawnBatches = batchCount;

    const uint id = gl_GlobalInvocationID.x / gl_WorkGroupSize.x;
    if (id >= batchCount){
        return;
    }

    const Node batch = nodes[batchList[id]];
    const vec3 batchBBSize = vec3(batch.box.maxX, batch.box.maxY, batch.box.maxZ) - vec3(batch.box.minX, batch.box.minY, batch.box.minZ);
    const uint batchPixelExtend = getBatchPixelExtend(batch, camera.resolution, camera.projection, camera.view);
    const uint localId = gl_LocalInvocationID.x;
    const uint pointCount = batch.maskDepthCount >> 13;
    const uint workAmount = (pointCount / gl_WorkGroupSize.x) + 1;

    for (uint k = batch.pointOffset + localId * workAmount; k < batch.pointOffset + (localId + 1) * workAmount; ++k){
        if ((k - batch.pointOffset) >= pointCount){
            break;
        }

        const vec4 projected = camera.projection * camera.view * vec4(getAdaptivePointPosition(batchBBSize, vec3(batch.box.minX, batch.box.minY, batch.box.minZ), batchPixelExtend, k), 1);

        if((-projected.w <= projected.x) && (projected.x <= projected.w) &&
                (-projected.w <= projected.y) && (projected.y <= projected.w) &&
                (0.f <= projected.z) && (projected.z <= projected.w)){
            // projection is within window
            const vec2 coords = (projected.xy/projected.w * .5f + .5f) * camera.resolution;
            const uint pixelID = getPixelID(camera.resolution, uvec2(coords));

            const uint depth = floatBitsToUint(projected.w);

            // create new framebuffer entry with depth in upper bits for comparison
            uint64_t framebufferNewEntry = uint64_t(depth) << 32;

            // early depth test
            const uint64_t depthFetch = framebuffer[pixelID];

            if(framebufferNewEntry < depthFetch){

                // add the color information to entry
                framebufferNewEntry |= pointsRgba[k];   

                // actual depth test
                atomicMin(framebuffer[pixelID], framebufferNewEntry);
            }
        }
    }
}