diff --git a/src/tga_vulkan/tga_vulkan.cpp b/src/tga_vulkan/tga_vulkan.cpp
index b348457..ea1838b 100644
--- a/src/tga_vulkan/tga_vulkan.cpp
+++ b/src/tga_vulkan/tga_vulkan.cpp
@@ -218,30 +218,31 @@ namespace /*init vulkan objects*/
         vk::PhysicalDeviceFeatures2 features;
         vk::PhysicalDeviceVulkan11Features features_11;
         vk::PhysicalDeviceVulkan12Features features_12;
-        vk::PhysicalDeviceRayQueryFeaturesKHR rayQueryFeature;
-        vk::PhysicalDeviceAccelerationStructureFeaturesKHR asFeature;
+        vk::PhysicalDeviceSubgroupSizeControlFeatures subgroupControlFeature;
+
         features.pNext = &features_11;
         features_11.pNext = &features_12;
-        features_12.pNext = &asFeature;
-        asFeature.pNext = &rayQueryFeature;
+        features_12.pNext = &subgroupControlFeature;
         gpu.getFeatures2(&features);
 
+        vk::PhysicalDeviceProperties2 properties;
+        vk::PhysicalDeviceSubgroupProperties subgroupProperties;
+
+        properties.pNext = &subgroupProperties;
+        gpu.getProperties2(&properties);
+
         auto extensions = [](bool withRayQuerySupport) -> std::vector<const char *> {
             if (!withRayQuerySupport)
-                return {VK_KHR_SWAPCHAIN_EXTENSION_NAME};
+                return {VK_KHR_SWAPCHAIN_EXTENSION_NAME, VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME};
             else
-                return {VK_KHR_SWAPCHAIN_EXTENSION_NAME,
-                        // Ray Query Extension
-                        VK_KHR_RAY_QUERY_EXTENSION_NAME, VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME,
-                        // Required by VK_KHR_acceleration_structure
-                        VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME, VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME,
-                        VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
-                        // Required for ray queries
-                        VK_KHR_SPIRV_1_4_EXTENSION_NAME,
-                        // Required by VK_KHR_spirv_1_4
-                        VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME};
-        }(rayQueryFeature.rayQuery);
-        if (rayQueryFeature.rayQuery) std::cout << "Vulkan RayQuery extension enabled\n";
+                return {VK_KHR_SWAPCHAIN_EXTENSION_NAME, VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
+                        VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME};
+        }(subgroupProperties.supportedOperations == vk::SubgroupFeatureFlagBits::ePartitionedNV);
+        if (subgroupProperties.supportedOperations == vk::SubgroupFeatureFlagBits::ePartitionedNV) {
+            std::cout << "Vulkan Subgroup Partitioned extension enabled\n";
+        } else {
+            std::cout << "Vulkan Subgroup Partitioned extension not availble\n";
+        }
 
 #ifdef __APPLE_
         extensions.push_back(VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME);
@@ -1026,11 +1027,15 @@ ComputePass Interface::createComputePass(ComputePassInfo const& computePassInfo)
 
     auto pipelineLayout = device.createPipelineLayout({{}, descriptorSetLayouts});
 
+    auto requiredSubgroupSize =
+        vk::PipelineShaderStageRequiredSubgroupSizeCreateInfo(computePassInfo.requiredSubgroupSize);
+
     auto pipeline =
         device
             .createComputePipeline({}, {{},
-                                        vk::PipelineShaderStageCreateInfo({}, vk::ShaderStageFlagBits::eCompute,
-                                                                          computeShaderModule, "main"),
+                                        vk::PipelineShaderStageCreateInfo(
+                                            {}, vk::ShaderStageFlagBits::eCompute, computeShaderModule, "main", 0,
+                                            computePassInfo.requiredSubgroupSize ? &requiredSubgroupSize : 0),
                                         pipelineLayout})
             .value;
 
diff --git a/src/tga_vulkan/tga_vulkan_extensions.cpp b/src/tga_vulkan/tga_vulkan_extensions.cpp
index dbe1988..335f845 100644
--- a/src/tga_vulkan/tga_vulkan_extensions.cpp
+++ b/src/tga_vulkan/tga_vulkan_extensions.cpp
@@ -76,16 +76,7 @@ namespace tga
 {
 void loadVkDeviceExtensions(vk::Device& device)
 {
-    PFN_INIT(device, vkCreateAccelerationStructureKHR);
-    PFN_INIT(device, vkDestroyAccelerationStructureKHR);
-    PFN_INIT(device, vkGetAccelerationStructureDeviceAddressKHR);
-    PFN_INIT(device, vkGetAccelerationStructureBuildSizesKHR);
-    PFN_INIT(device, vkCmdBuildAccelerationStructuresKHR);
 
-    if (!pfn_vkCreateAccelerationStructureKHR || !pfn_vkDestroyAccelerationStructureKHR ||
-        !pfn_vkGetAccelerationStructureDeviceAddressKHR || !pfn_vkGetAccelerationStructureBuildSizesKHR ||
-        !pfn_vkCmdBuildAccelerationStructuresKHR)
-        std::cerr << "Ray Tracing not available\n";
 }
 
 }  // namespace tga
\ No newline at end of file
